<project name="Putty" default="war">

    <property file="${user.home}/build.properties"/>

    <!-- Sonar code reporting task: http://www.sonarsource.org -->
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
        <!-- Specify the task libaray here unless it's already in your ${ANT_HOME}/lib directory -->
        <classpath path="lib-build/sonar-ant-task-1.3.jar" />
    </taskdef>
    <!-- Sonar server  variables.
         I can't find docs if you're supposed to have the jdbc connections in here
         if you're submitting to a remote server.
         Seems like a security and mgmt nightmare to keep values visible and in sync accross projects,
         so just put the "real" values in the build.properties file you're including. -->

    <property name="sonar.jdbc.url"
              value=""
              description="Set this in your external build.properties file" />
    <property name="sonar.jdbc.username" 
              value=""
              description="Set this in your external build.properties file" />
    <property name="sonar.jdbc.password" 
              value=""
              description="Set this in your external build.properties file" />
<!-- If sonar is running on a remote host -->
    <property name="sonar.host.url"
              value=""
              description="Set this in your external build.properties file" />


	<!-- Tweak these as appropriate or override in your build.properties file -->
	<property name="appName" value="putty" />
	<property name="jarFileName" value="${appName}.jar" />
	<property name="warFileName" value="${appName}.war" />
	<property name="webInfDir" value="resources/WEB-INF" />
	<property name="distDir" value="./dist" />
	<property name="buildDir" value="./build" />
	<property name="docDir" value="${buildDir}/javadoc" />
	<property name="JBOSS_HOME" value="/usr/local/jboss" />
	<property name="JBOSS_PROJECT" value="eonline" />
	<property name="DeployDir" value="/usr/local/apache-tomcat-6.0.18/webapps" />
	<property name="tmpDir" value="/usr/local/apache-tomcat-6.0.18/temp" />
	<property name="workDir" value="/usr/local/apache-tomcat-6.0.18/work" />
	<property name="distDir" value="dist" />

    <!-- ec2 variables.
          Make sure jsch.jar is in your ant classpath for scp to work! -->
    <property name="ec2.keyfile"
              description="ec2 key for ssh access to the cloud instance"
              value="${user.home}/.ec2/intl-jv-keypair.pem" />
    <property name="ec2.remotepath.1"
              description="remote path to ec2 webapp directory"
              value="ec2-user@ec2-184-73-45-249.compute-1.amazonaws.com:/usr/local/tomcat/webapps/ROOT.war"/>
    <property name="ec2.remotepath.2"
                  description="remote path to ec2 webapp directory"
                  value="ec2-user@ec2-75-101-169-37.compute-1.amazonaws.com:/usr/local/tomcat/webapps/ROOT.war"/>

    <!-- end ec2 variables -->

	<path id="compile.classpath">
		<pathelement location="." />
		<fileset dir="./lib" includes="*.jar" />
		<fileset dir="./lib-build" includes="**/*.jar" />
	</path>

    <target name="everything" depends="clean,war,javadoc-dist,sonar" />

	<target name="init">
		<mkdir dir="${distDir}" />
		<mkdir dir="${buildDir}" />
	</target>



	<target name="compile" depends="init">
		<javac srcdir="src" destdir="${buildDir}" debug="yes">
			<classpath>
				<fileset dir="lib" includes="*.jar" />
				<fileset dir="lib-build" includes="*.jar" />
			</classpath>
			<include name="**/*.java" />
		</javac>
	</target>

	<target name="clean">
		<delete dir="${distDir}" />
		<delete dir="${buildDir}" />
	</target>

	<target name="jar" depends="compile">
		<jar destfile="${buildDir}/${jarFileName}">
			<fileset dir="${buildDir}" includes="**/*.class" />
			<fileset dir="lib" includes="*.jar"/>
		</jar>
	</target>

	<target name="war" depends="jar">
		<propertyfile comment="Image Resizer Application Information" file="${buildDir}/app.info">
			<entry key="build.timestamp" type="date" pattern="MM/dd/yyyy HH:mm" value="now" />
		</propertyfile>

		<war destfile="${distDir}/${warFileName}" webxml="resources/WEB-INF/web.xml" manifest="conf/META-INF/manifest">
			<webinf dir="${webInfDir}">
				<include name="*.xml" />
				<include name="jsp/**/*.jsp" />
				<exclude name="web.xml" />
			</webinf>

            <lib dir="./lib" includes="**/*.jar"/>

            <lib dir="${buildDir}" includes="${jarFileName}"/>
            	
			<fileset dir="${buildDir}">
				<include name="app.info" />
			</fileset>
            <fileset dir="./resources/jsp">
				<include name="**/*.jsp" />
                <include name="**/*.png" />
                <include name="**/*.css" />
                <include name="**/*.jpg" />
                <include name="**/*." />
			</fileset>
		</war>
	</target>


	<target name="javadoc" description="Generate Javadoc for the current code">
		<echo message="Generating Javadoc for current code" />
		<mkdir dir="${docDir}" />

		<javadoc sourcepath="./src" packagenames="*" classpathref="compile.classpath" header="Documentation Updated ${build.timestamp}" footer="Documentation Updated ${build.timestamp}" destdir="${docDir}" />
	</target>

	<target name="javadoc-dist"
            description="Package up javadoc so we can export it as a cruise control artifact"
            depends="javadoc">
		<mkdir dir="${distDir}" />
		<jar destfile="${distDir}/javadocs.jar">
			<fileset dir="${docDir}">
				<include name="**/*" />
			</fileset>
		</jar>
	</target>

	<target name="Undeploy">
		<delete dir="${DeployDir}/${warFileName}" />
		<echo message="Deleted ${DeployDir}/${warFileName}" />
		<delete dir="${tmpDir}" />
		<echo message="Deleted ${tmpDir}" />
		<delete dir="${workDir}" />
		<echo message="Deleted ${workDir}" />
	</target>

    <target name="deploy" depends="war">
        <copy todir="${DeployDir}">
           <fileset dir="${distDir}">
               <include name="**/*.war" />
           </fileset>
        </copy>

    </target>

    <target name="deploy-ec2" depends="war">
        <echo message="Copying war file to ${ec2.remotepath.1}"/>
        <scp description="SCP up to our reserved ec2 instance(s)"
             file="${distDir}/putty.war"
             keyfile="${ec2.keyfile}"
             remoteToFile="${ec2.remotepath.1}"
            verbose="true"
             trust="true">
        </scp>
        <echo message="Copying war file to ${ec2.remotepath.2}"/>
        <scp description="SCP up to our reserved ec2 instance(s)"
                     file="${distDir}/putty.war"
                     keyfile="${ec2.keyfile}"
                     remoteToFile="${ec2.remotepath.2}"
                    verbose="true"
                     trust="true">
                </scp>


    </target>


	<target name="EXPLODED-Deploy" depends="everything">
		<echo message="Copying Files in ${distDir} to ${DeployDir}" />
		<mkdir dir="${DeployDir}/${warFileName}" />
		<unwar src="${distDir}/${warFileName}" dest="${DeployDir}/${warFileName}" />
	</target>

	<target name="EXPLODED-Update-server" description="Updates site local deployment">
		<copy todir="${DeployDir}/${warFileName}">
			<fileset dir="resources/jsp">
				<include name="**/*.jsp" />
			</fileset>
		</copy>
		<!-- refresh the build binary section configure files -->
		<copy todir="${DeployDir}/${warFileName}/WEB-INF">
			<fileset dir="resources/WEB-INF">
				<include name="**/*.xml" />
			</fileset>
		</copy>
	</target>
	<target name="EXPLODED-Update-All" depends="EXPLODED-Update-server" />

    <target name="sonar" description="Sonar code reporting">
        <property name="sonar.sources" value="src,resources/jsp" />

        <property name="sonar.binaries" value="${buildDir}" />
        <property name="sonar.libraries" value="lib,lib-build" />

        <sonar:sonar key="com.nbcuni.onts.ptg:Putty"
                     version="1.0-SNAPSHOT"
                     xmlns:sonar="antlib:org.sonar.ant"/>
    </target>

	<tstamp>
		<format property="build.timestamp" pattern="M d yyyy h:mm a" locale="en,US" />
	</tstamp>

</project>

